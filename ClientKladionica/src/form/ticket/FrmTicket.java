/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package form.ticket;

import controller.Controller;
import convert.Convert;
import domain.Has;
import domain.Match;
import domain.Odds;
import domain.Ticket;
import domain.Tip;
import form.FrmMain;
import form.FrmMode;
import form.ticket.model.TableModelTicket;
import java.awt.Color;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import session.Session;
import domain.GeneralEntity;

/**
 *
 * @author not-sure
 */
public class FrmTicket extends javax.swing.JDialog {

    TableModelTicket tm;
    FrmMode mode;
    int IDTicket = -1;

    /**
     * Creates new form FrmTicket
     */
    public FrmTicket(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    public FrmTicket(FrmMain parent, boolean modal, FrmMode mode) {
        super(parent, modal);
        initComponents();
        setScreenCenter();
        this.mode = mode;
        adjustForm(mode);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlCurrentUser = new javax.swing.JPanel();
        lblCurrntUser = new javax.swing.JLabel();
        pnlTicket = new javax.swing.JPanel();
        btnSave = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTicket = new javax.swing.JTable();
        pnlStatus = new javax.swing.JPanel();
        txtStatus = new javax.swing.JTextField();
        btnDeleteTicket = new javax.swing.JButton();
        btnPayoff = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        pnlSearchTicket = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        txtTicketID = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        pnlPaymentInfo = new javax.swing.JPanel();
        lblDate = new javax.swing.JLabel();
        txtDate = new javax.swing.JTextField();
        lblEmployee = new javax.swing.JLabel();
        txtEmployee = new javax.swing.JTextField();
        lblPayment = new javax.swing.JLabel();
        txtPayment = new javax.swing.JTextField();
        pnlMatch = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtMatchID = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        cmbTip = new javax.swing.JComboBox<>();
        btnAdd = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        pnlWin = new javax.swing.JPanel();
        lblTotalOdds = new javax.swing.JLabel();
        txtPossibleWin = new javax.swing.JTextField();
        lblPossibleWin = new javax.swing.JLabel();
        txtTotalOdds = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        pnlCurrentUser.setBorder(javax.swing.BorderFactory.createTitledBorder("Current user"));

        javax.swing.GroupLayout pnlCurrentUserLayout = new javax.swing.GroupLayout(pnlCurrentUser);
        pnlCurrentUser.setLayout(pnlCurrentUserLayout);
        pnlCurrentUserLayout.setHorizontalGroup(
            pnlCurrentUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCurrentUserLayout.createSequentialGroup()
                .addComponent(lblCurrntUser, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        pnlCurrentUserLayout.setVerticalGroup(
            pnlCurrentUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCurrentUserLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblCurrntUser, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(26, Short.MAX_VALUE))
        );

        pnlTicket.setBorder(javax.swing.BorderFactory.createTitledBorder("Ticket"));

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        tblTicket.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblTicket.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblTicketMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblTicket);

        pnlStatus.setBorder(javax.swing.BorderFactory.createTitledBorder("Status"));

        txtStatus.setEditable(false);

        javax.swing.GroupLayout pnlStatusLayout = new javax.swing.GroupLayout(pnlStatus);
        pnlStatus.setLayout(pnlStatusLayout);
        pnlStatusLayout.setHorizontalGroup(
            pnlStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlStatusLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtStatus, javax.swing.GroupLayout.DEFAULT_SIZE, 399, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlStatusLayout.setVerticalGroup(
            pnlStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlStatusLayout.createSequentialGroup()
                .addComponent(txtStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 8, Short.MAX_VALUE))
        );

        btnDeleteTicket.setText("Delete");
        btnDeleteTicket.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteTicketActionPerformed(evt);
            }
        });

        btnPayoff.setText("Payoff");
        btnPayoff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPayoffActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlTicketLayout = new javax.swing.GroupLayout(pnlTicket);
        pnlTicket.setLayout(pnlTicketLayout);
        pnlTicketLayout.setHorizontalGroup(
            pnlTicketLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTicketLayout.createSequentialGroup()
                .addGroup(pnlTicketLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlTicketLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(pnlTicketLayout.createSequentialGroup()
                        .addComponent(pnlStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(101, 101, 101)
                        .addComponent(btnPayoff, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDeleteTicket, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45)
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pnlTicketLayout.setVerticalGroup(
            pnlTicketLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTicketLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(pnlTicketLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlTicketLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnlStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlTicketLayout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(pnlTicketLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDeleteTicket)
                            .addComponent(btnPayoff, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlSearchTicket.setBorder(javax.swing.BorderFactory.createTitledBorder("Search Ticket"));

        jLabel4.setText("Ticket ID:");

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlSearchTicketLayout = new javax.swing.GroupLayout(pnlSearchTicket);
        pnlSearchTicket.setLayout(pnlSearchTicketLayout);
        pnlSearchTicketLayout.setHorizontalGroup(
            pnlSearchTicketLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSearchTicketLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addGroup(pnlSearchTicketLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlSearchTicketLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnSearch))
                    .addComponent(txtTicketID))
                .addContainerGap())
        );
        pnlSearchTicketLayout.setVerticalGroup(
            pnlSearchTicketLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSearchTicketLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(pnlSearchTicketLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTicketID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSearch)
                .addContainerGap())
        );

        pnlPaymentInfo.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        lblDate.setText("Date:");

        txtDate.setEditable(false);

        lblEmployee.setText("Employee:");

        txtEmployee.setEditable(false);

        lblPayment.setText("Payment:");

        txtPayment.setEditable(false);

        javax.swing.GroupLayout pnlPaymentInfoLayout = new javax.swing.GroupLayout(pnlPaymentInfo);
        pnlPaymentInfo.setLayout(pnlPaymentInfoLayout);
        pnlPaymentInfoLayout.setHorizontalGroup(
            pnlPaymentInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPaymentInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlPaymentInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPayment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblEmployee, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlPaymentInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(txtPayment, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE)
                    .addComponent(txtDate)
                    .addComponent(txtEmployee))
                .addContainerGap())
        );
        pnlPaymentInfoLayout.setVerticalGroup(
            pnlPaymentInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPaymentInfoLayout.createSequentialGroup()
                .addGap(0, 4, Short.MAX_VALUE)
                .addGroup(pnlPaymentInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPayment, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPayment, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlPaymentInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDate, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlPaymentInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pnlMatch.setBorder(javax.swing.BorderFactory.createTitledBorder("Match and tip"));

        jLabel1.setText("Match ID:");

        jLabel2.setText("Tip:");

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlMatchLayout = new javax.swing.GroupLayout(pnlMatch);
        pnlMatch.setLayout(pnlMatchLayout);
        pnlMatchLayout.setHorizontalGroup(
            pnlMatchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMatchLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMatchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMatchLayout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 181, Short.MAX_VALUE)
                        .addComponent(txtMatchID, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlMatchLayout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cmbTip, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlMatchLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDelete)))
                .addContainerGap())
        );
        pnlMatchLayout.setVerticalGroup(
            pnlMatchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMatchLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(pnlMatchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtMatchID, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlMatchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cmbTip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlMatchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(btnEdit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDelete))
                .addContainerGap())
        );

        pnlWin.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        lblTotalOdds.setText("Total odds:");

        txtPossibleWin.setEditable(false);

        lblPossibleWin.setText("Possible win:");

        txtTotalOdds.setEditable(false);

        javax.swing.GroupLayout pnlWinLayout = new javax.swing.GroupLayout(pnlWin);
        pnlWin.setLayout(pnlWinLayout);
        pnlWinLayout.setHorizontalGroup(
            pnlWinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlWinLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlWinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPossibleWin)
                    .addComponent(lblTotalOdds, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlWinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtTotalOdds, javax.swing.GroupLayout.DEFAULT_SIZE, 294, Short.MAX_VALUE)
                    .addComponent(txtPossibleWin))
                .addContainerGap())
        );
        pnlWinLayout.setVerticalGroup(
            pnlWinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlWinLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(pnlWinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTotalOdds, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTotalOdds, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addGroup(pnlWinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPossibleWin, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtPossibleWin, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnlMatch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlSearchTicket, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnlWin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlPaymentInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pnlPaymentInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pnlSearchTicket, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pnlMatch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pnlWin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlCurrentUser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pnlTicket, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlCurrentUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlTicket, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private Odds getOddsForNewTicket() throws Exception {
        int id;
        try {
            id = Integer.parseInt(txtMatchID.getText().trim());
            if (id < 0) {
                throw new Exception();
            }
        } catch (Exception e) {
            throw new Exception("Match ID must be positive integer");
        }

        List<Odds> list = tm.getList();
        for (Odds o : list) {
            if (o.getMatch().getId() == id) {
                throw new Exception("Match " + id + " is already on ticket, you can not have same game more than one time on one ticket");
            }
        }

        return getOdds(id);
    }

    private Odds getOddsForEdit() throws Exception {
        int id;
        try {
            id = Integer.parseInt(txtMatchID.getText().trim());
            if (id < 0) {
                throw new Exception();
            }
        } catch (Exception e) {
            throw new Exception("Match ID must be positive integer");
        }

        Match selecMatch = tm.getList().get(tblTicket.getSelectedRow()).getMatch();

        if (id != selecMatch.getId()) {
            List<Odds> list = tm.getList();
            for (Odds o : list) {
                if (o.getMatch().getId() == id) {
                    throw new Exception("Match " + id + " is already on ticket, you can not have same game more than one time on one ticket");
                }
            }
        }
        return getOdds(id);
    }

    private Odds getOdds(int id) throws Exception {
        Tip tip = (Tip) cmbTip.getSelectedItem();

        Odds odds = null;
        try {
            odds = Controller.getInstance().getOddsForNewTicket(id, tip);
        } catch (Exception ex) {
            Logger.getLogger(FrmTicket.class.getName()).log(Level.SEVERE, null, ex);
            throw ex;
        }
        return odds;
    }

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        Odds odds = null;
        try {
            odds = getOddsForNewTicket();
        } catch (Exception ex) {
            Logger.getLogger(FrmTicket.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(rootPane, ex.getMessage());
            return;
        }

        tm.addOdds(odds);
        resetNew();
        changeTotalOdds();
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed

        int row = tblTicket.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(rootPane, "Match for edit must be selected");
            return;
        }

        Odds odds = null;
        try {
            odds = getOddsForEdit();
        } catch (Exception ex) {
            Logger.getLogger(FrmTicket.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(rootPane, ex.getMessage());
            return;
        }

        tm.replaceOdds(row, odds);
        changeTotalOdds();
        resetNew();
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int row = tblTicket.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(rootPane, "Match for delete must be selected");
            return;
        }
        tm.deleteOdds(row);
        changeTotalOdds();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void tblTicketMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblTicketMouseClicked
        Odds o = tm.getList().get(tblTicket.getSelectedRow());
        txtMatchID.setText(o.getMatch().getId() + "");
        cmbTip.setSelectedItem(o.getTip());
    }//GEN-LAST:event_tblTicketMouseClicked

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        double payment = 0;
        try {
            payment = Double.parseDouble(txtPayment.getText().trim());
            if (payment < 30) {
                throw new Exception();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Ticket is not saved! Payment must be number greater than 30.");
            return;
        }

        if (tm.getList().size() == 0) {
            JOptionPane.showMessageDialog(rootPane, "Ticket is not saved! Ticket must have at least one match.");
            return;
        }

        double totalOdds = Double.parseDouble(txtTotalOdds.getText());
        double win = payment * totalOdds;

        Ticket ticket = new Ticket(payment, totalOdds, win, Session.getInstance().getCurreUser());
        List<Has> listHas = new LinkedList<>();

        for (Odds o : tm.getList()) {
            listHas.add(new Has(o, ticket));
        }
        try {
            ticket = Controller.getInstance().saveTicket(ticket, listHas);
        } catch (Exception ex) {
            Logger.getLogger(FrmTicket.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }

        JOptionPane.showMessageDialog(rootPane, "Ticket is successfuly saved! ID is " + ticket.getId() + " | total odds is " + totalOdds + " | possible win is " + win);
        resetForm();
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnDeleteTicketActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteTicketActionPerformed
//        int id = 0;
//        try {
//            id = Integer.parseInt(txtTicketID.getText().trim());
//            if (id < 0) {
//                throw new RuntimeException();
//            }
//        } catch (RuntimeException e) {
//            JOptionPane.showMessageDialog(rootPane, "Ticket ID must be positive integer");
//            return;
//        }

        try {
            Controller.getInstance().deleteTicket(IDTicket);
        } catch (Exception ex) {
            Logger.getLogger(FrmTicket.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(rootPane, "Ticket is not deleted! " + ex.getMessage());
            return;
        }
        JOptionPane.showMessageDialog(rootPane, "Ticket " + IDTicket + " is successufly deleted!");
        txtTicketID.setText("");
        pnlTicket.setVisible(false);
        pnlPaymentInfo.setVisible(false);
        pnlWin.setVisible(false);
    }//GEN-LAST:event_btnDeleteTicketActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        pnlTicket.setVisible(false);
        pnlPaymentInfo.setVisible(false);
        pnlWin.setVisible(false);

        txtPayment.setText("");
        int id = 0;
        try {
            id = Integer.parseInt(txtTicketID.getText().trim());
            if (id < 0) {
                throw new RuntimeException();
            }
        } catch (RuntimeException e) {
            JOptionPane.showMessageDialog(rootPane, "Ticket is not found! Ticket ID must be positive integer.");
            IDTicket = -1;
            return;
        }

        Ticket ticket = null;
        List<Odds> list = null;

        try {
            Object[] arr = Controller.getInstance().getTicket(id);
            ticket = (Ticket) arr[0];
            list = (List<Odds>) arr[1];
        } catch (Exception ex) {
            Logger.getLogger(FrmTicket.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(rootPane, "Ticket is not found! "+ex.getMessage());
            IDTicket = -1;
            return;
        }

        txtDate.setText(Convert.date2StringNice(ticket.getTimeOfPayment()));
        txtEmployee.setText(ticket.getUser().toString());
        txtPayment.setText(ticket.getPaid() + "");
        txtTotalOdds.setText(ticket.getTotalodds() + "");
        txtPossibleWin.setText(ticket.getWin() + "");
        String status = ticket.getStatus();
        IDTicket = ticket.getId();
        txtStatus.setText(status);
        switch (status) {
            case "Not finished":
                txtStatus.setBackground(Color.GRAY);
                break;
            case "Winning":
                txtStatus.setBackground(Color.GREEN);
                break;
            case "Losing":
                txtStatus.setBackground(Color.RED);
                break;
        }

        tm.setList(list);
        pnlTicket.setVisible(true);
        pnlPaymentInfo.setVisible(true);
        pnlWin.setVisible(true);
        if(mode == FrmMode.DELETE){
            btnDeleteTicket.setVisible(true);
        }
        if(mode == FrmMode.PAYOFF){
            btnPayoff.setVisible(true);
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnPayoffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPayoffActionPerformed
//        int id = 0;
//        try {
//            id = Integer.parseInt(txtTicketID.getText().trim());
//            if (id < 0) {
//                throw new RuntimeException();
//            }
//        } catch (RuntimeException e) {
//            JOptionPane.showMessageDialog(rootPane, "Ticket ID must be positive integer");
//            return;
//        }
//        if(IDTicket == -1){
//            JOptionPane.showMessageDialog(rootPane, "Ticket is not paied! First you have to find ticket.");
//            return;
//        }
        Ticket ticket = null;
        try {
            ticket = Controller.getInstance().payoffTicket(IDTicket);
        } catch (Exception ex) {
            Logger.getLogger(FrmTicket.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(rootPane, ex.getMessage());
            return;
        }
        JOptionPane.showMessageDialog(rootPane, "Ticket " + IDTicket + " is successfully payed! Total winning is " + ticket.getWin());
        txtTicketID.setText("");
        pnlTicket.setVisible(false);
        pnlPaymentInfo.setVisible(false);
        pnlWin.setVisible(false);
    }//GEN-LAST:event_btnPayoffActionPerformed

    private void setScreenCenter() {
        setLocationRelativeTo(null);
    }

    private void adjustForm(FrmMode mode) {
        populateCurrentUser();
        populateTable();
        switch (mode) {
            case NEW:
                setTitle("New ticket");
                populateCmbTip();
                pnlSearchTicket.setVisible(false);
                btnDeleteTicket.setVisible(false);
                btnPayoff.setVisible(false);
                lblDate.setVisible(false);
                txtDate.setVisible(false);
                lblEmployee.setVisible(false);
                txtEmployee.setVisible(false);
                pnlStatus.setVisible(false);
                tblTicket.getColumnModel().getColumn(6).setWidth(0);
                tblTicket.getColumnModel().getColumn(6).setMinWidth(0);
                tblTicket.getColumnModel().getColumn(6).setMaxWidth(0);
                txtPayment.setEditable(true);
                lblPossibleWin.setVisible(false);
                txtPossibleWin.setVisible(false);
                break;
            case DELETE:
                setTitle("Delete ticket");

/*                pnlMatch.setVisible(false);
                pnlTicket.setVisible(false);
                btnSave.setVisible(false);
                btnPayoff.setVisible(false);
                pnlStatus.setVisible(false);
                pnlWin.setVisible(false);
                pnlPaymentInfo.setVisible(false);
                btnSearch.setVisible(false);*/
                positsForSearch();
                break;
            case PAYOFF:
                setTitle("Payoff ticket");

/*                pnlMatch.setVisible(false);
                pnlTicket.setVisible(false);
                pnlWin.setVisible(false);
                pnlPaymentInfo.setVisible(false);
                btnSave.setVisible(false);
                btnDeleteTicket.setVisible(false);
                txtPayment.setVisible(false);
                lblPayment.setVisible(false);
                btnSearch.setVisible(false);*/
                positsForSearch();
                break;
            case CHECK:
                setTitle("Check ticket");                
                positsForSearch();
                break;
        }
    }

    private void positsForSearch() {
        pnlMatch.setVisible(false);
        pnlTicket.setVisible(false);
        pnlWin.setVisible(false);
        pnlPaymentInfo.setVisible(false);
        btnDeleteTicket.setVisible(false);
        btnSave.setVisible(false);
        btnPayoff.setVisible(false);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDeleteTicket;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnPayoff;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox<Tip> cmbTip;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCurrntUser;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblEmployee;
    private javax.swing.JLabel lblPayment;
    private javax.swing.JLabel lblPossibleWin;
    private javax.swing.JLabel lblTotalOdds;
    private javax.swing.JPanel pnlCurrentUser;
    private javax.swing.JPanel pnlMatch;
    private javax.swing.JPanel pnlPaymentInfo;
    private javax.swing.JPanel pnlSearchTicket;
    private javax.swing.JPanel pnlStatus;
    private javax.swing.JPanel pnlTicket;
    private javax.swing.JPanel pnlWin;
    private javax.swing.JTable tblTicket;
    private javax.swing.JTextField txtDate;
    private javax.swing.JTextField txtEmployee;
    private javax.swing.JTextField txtMatchID;
    private javax.swing.JTextField txtPayment;
    private javax.swing.JTextField txtPossibleWin;
    private javax.swing.JTextField txtStatus;
    private javax.swing.JTextField txtTicketID;
    private javax.swing.JTextField txtTotalOdds;
    // End of variables declaration//GEN-END:variables

    private void populateCurrentUser() {
        lblCurrntUser.setText(Session.getInstance().getCurreUser().toString());
    }

    private void populateTable() {
        tm = new TableModelTicket();
        tblTicket.setModel(tm);
    }

    private void populateCmbTip() {
        cmbTip.removeAllItems();
        List<GeneralEntity> list = null;
        try {
            list = Controller.getInstance().getAllTips();
        } catch (Exception ex) {
            Logger.getLogger(FrmTicket.class.getName()).log(Level.SEVERE, null, ex);
        }
        for (GeneralEntity d : list) {
            cmbTip.addItem((Tip) d);
        }
    }

    private void changeTotalOdds() {
        List<Odds> list = tm.getList();
        if (list.size() == 0) {
            txtTotalOdds.setText("");
            return;
        }
        double totalOdds = 1;
        for (Odds o : list) {
            totalOdds *= o.getValue();
        }
        txtTotalOdds.setText(totalOdds + "");
    }

    private void resetNew() {
        txtMatchID.setText("");
        cmbTip.setSelectedIndex(0);
    }

    private void resetForm() {
        txtPayment.setText("");
        tm.setList(new LinkedList<>());
        changeTotalOdds();
    }
}
